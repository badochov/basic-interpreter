repl-top-level  : tuple | top-lvl

top-lvl         : type-decl | var-decl

variant-type-id : IDENTIFIER (KEYWORD:TYPE_DESCRIPTION IDENTIFIER (MUL IDENTIFIER))?

type-decl       : KEYWORD:TYPE_DECLARATION IDENTIFIER EQ
                        variant-type-id (KEYWORD:OR variant-type-id)*

decl-arg        : (IDENTIFIER|destruct-tuple (COLON type-hint)

var-decl        : KEYWORD:VARIABLE_DECLARATION IDENTIFIER (COMA type-hint)?
                    (decl-arg* EQ tuple)|
                    (decl-arg+ ARROW match-case+ KEYWORD:END))

tuple           : expr (COMA expr)*

expr            : var-decl KEYWORD:IN expr
                : logic-expr ((KEYWORD:OR|KEYWORD:AND) logic-expr)*

logic-expr      : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*
                : KEYWORD:NOT logic-expr

arith-expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : atom (POW factor)*

atom            : if-expr
                : IDENTIFIER (argument)*
                : fun-def
                : argument
                : match

match-case      : IDENTIFIER IDENTIFIER* ARROW tuple

match           : KEYWORD:MATCH tuple KEYWORD:WITH  match-case+ KEYWORD:END


if-expr         : KEYWORD:IF expr KEYWORD:THEN tuple
                  (KEYWORD:ELIF expr KEYWORD:THEN tuple)*
                  KEYWORD:ELSE tuple

fun-def         : KEYWORD:FN ((decl-arg* EQUALS tuple)|(decl-arg+ ARROW match-case+ KEYWORD:END) )

argument        : INT|FLOAT
                : list
                : LPAREN tuple RPAREN
                : IDENTIFIER argument*

list            : LBRACKET (tuple (LIST_SEP tuple)* LIST_SEP?)? RBRACKET

destruct-tuple  : LPAREN IDENTIFIER (COMA IDENTIFIER)* RPAREN

type-hint       : LPAREN type-hint RPAREN
                : type-hint ARROW type-hint
                : destruct-tuple
                : IDENTIFIER